
import telebot
import schedule
import pymongo
import time
import os
import logging
from apscheduler.schedulers.blocking import BlockingScheduler
from threading import Thread
from telebot import types
from pymongo import MongoClient
from bson import ObjectId

message_time = os.environ.get("TIME")
chat_id = os.environ.get("CHAT_ID")

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


myBot = telebot.TeleBot(os.environ.get("TOKEN"))


@myBot.message_handler(commands=['start'])
def startMessage(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
    markup.add(btn1, btn2)
    myBot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫", reply_markup=markup)

@myBot.message_handler(commands=['test'])
def testMessage(message):
    send_stat()

###################################################
################# Tasks collection ################
###################################################
@myBot.message_handler(commands=['createTasksCollection'])
def createTasksCollection(message):
    client = connectToDB()
    db = client.admin
    list_of_collections = db.list_collection_names()  # Return a list of collections in 'test_db'
    if "myTasks" not in list_of_collections:
        try:
         db.create_collection("myTasks")
         myBot.send_message(message.chat.id, '–Ø —Å–æ–∑–¥–∞–ª –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–¥–∞—á')
        except OSError as err:
         myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {err=}")

@myBot.message_handler(commands=['setTask'])
def setTask(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["myTasks"]
    documentsCount = currentCollection.count_documents({})
    newDocument = {
        "number": (documentsCount + 1),
        "text": "ex",
        "completed": False
    }
    try:
        currentCollection.insert_one(newDocument)
        myBot.send_message(message.chat.id, '–Ø —Å–æ–∑–¥–∞–ª —Ç–µ–±–µ –∑–∞–¥–∞—á—É')
    except OSError as err:
        myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {err=}")

def setTaskCompleted(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["myTasks"]
    query = {
        "text": message.text
    }
   
    try:
        doc = currentCollection.find_one(query)
        if doc != None:
            docID = doc["_id"]
            currentCollection.find_one_and_update(
            {"_id" : ObjectId("")},
            {"$set":
            {"completed": True}},upsert=True)
            myBot.send_message(message.chat.id, '–Ø –ø–æ–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è')
        else:
            myBot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    except OSError as err:
         myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {err=}")

@myBot.message_handler(commands=['getAllTasks'])
def getAllTasks(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["myTasks"]
    answer = ""
    for task in currentCollection.find():
        answer = answer + str(task["number"]) + ". " + str(task["text"])
        if task["completed"]:
            answer += " (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞)"
        answer += "\n"
    if answer == "":
        answer = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    myBot.send_message(message.chat.id, answer)

@myBot.message_handler(commands=['getActualTasks'])
def getActualTasks(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["myTasks"]
    answer = ""
    for task in currentCollection.find():
        if not task['completed']:
            answer = answer + str(task["number"]) + ". " + str(task["text"]) + "\n"
    
    if answer == "":
        answer = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    myBot.send_message(message.chat.id, answer)

@myBot.message_handler(commands=['getCompletedTasks'])
def getCompletedTasks(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["myTasks"]
    answer = ""
    for task in currentCollection.find():
        if task['completed']:
            answer = answer + str(task["number"]) + ". " + str(task["text"]) + "\n"
    
    if answer == "":
        answer = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    myBot.send_message(message.chat.id, answer)

###################################################
################# /Tasks collection ###############
###################################################

###################################################
######### Internet-data collection ################
###################################################
@myBot.message_handler(commands=['createData'])
def createData(message):
    client = connectToDB()
    db = client.admin
    list_of_collections = db.list_collection_names()  # Return a list of collections in 'test_db'
    if "internetData" not in list_of_collections:
        db.create_collection("internetData")
    
    currentCollection = db["internetData"]
    value = os.environ.get("STARTVALUE")
    newDocument = {
        "name": "–æ—Å—Ç–∞—Ç–æ–∫",
        "cost": float(value)
    }
    try:
        currentCollection.insert_one(newDocument)
        myBot.send_message(message.chat.id, '–Ø —Å–æ–∑–¥–∞–ª —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç')
    except OSError as err:
         myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {err=}")

@myBot.message_handler(commands=['getList'])
def getList(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    answer = ""
    for doc in currentCollection.find():
        answer = answer + str(doc["name"]) + " : " + str(doc["cost"]) + "\n"
    if answer == "":
        answer = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    myBot.send_message(message.chat.id, answer)
    
@myBot.message_handler(commands=['removeData'])
def removeData(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    try:
        currentCollection.delete_many({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
        myBot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ')
    except OSError as err:
        myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö {err=}")

@myBot.message_handler(commands=['getValue'])
def getStatMessage(message):
    currentValue = round(float(getData()),3)
    myBot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –Ω–∞ —Å—á–µ—Ç—É {str(currentValue)} —Ä.")

def send_stat():
    currentStat = round(float(getData()),3)
    message = '–ù–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è: ' + str(currentStat) + ' —Ä.'
    if float(currentStat) < 100.0:
        message+= '\n'+'–ü–æ—Ä–∞ –∫–ª–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏!' 
    reduce(currentStat)    
    myBot.send_message(chat_id, message)

def dataUpdate():
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    try:
        currentCollection.remove({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
        myBot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ')
    except OSError as err:
        myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö {err=}")

def getData():
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    answer = ""
    currentDoc = currentCollection.find_one({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
    lastCost = currentDoc["cost"]
    return lastCost

def reduce(currentValue):
    everyDayCost = os.environ.get("EVERYDAYCOST")
    value = float(currentValue) - float(everyDayCost)
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    currentCollection.delete_many({"name": "–æ—Å—Ç–∞—Ç–æ–∫"}) 
    newDoc = {
        "name": "–æ—Å—Ç–∞—Ç–æ–∫",
        "cost": value
    }
      
    currentCollection.insert_one(newDoc)

###################################################
######### /Internet-data collection ###############
###################################################

@myBot.message_handler(commands = ['meow'])
def meowFunc(message):
    url = getUrl()
    mybot.send_photo(message.chat.id, url)

def getUrl():
    contents = requests.get('https://thatcopy.pw/catapi/rest/').json()
    image_url = contents['url']
    return image_url


@myBot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–∞')
        btn2 = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
        btn3 = types.KeyboardButton('–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è')
        btn4 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ')
        btn5 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        markup.add(btn1,btn2,btn3,btn4,btn5)
        myBot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–∞':
        getStatMessage(message)
    elif message.text == '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        removeData(message)
    elif message.text == '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è':
        testMessage(message)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ':
        getList(message)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ':
        createData(message)
    elif message.text == '–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π':
        client = connectToDB()
        db = client.admin
        currentCollection = db["myTasks"]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        for task in currentCollection.find():
            btn = types.KeyboardButton(task["text"])
            markup.add(btn)
        myBot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
  
    #else: 
     #   setTaskCompleted(message)

def connectToDB():
    userName = os.environ.get("MONGO_MONGO_INITDB_ROOT_USERNAME")
    password = os.environ.get("MONGO_MONGO_INITDB_ROOT_PASSWORD")
    client = MongoClient(
    host = 'mongodb://94.26.239.216:22238',
    serverSelectionTimeoutMS = 3000, # 3 second timeout
    username=userName,
    password=password,
    )
    return client

scheduler = BlockingScheduler(timezone="Europe/Moscow") 
scheduler.add_job(send_stat, "cron", hour=9)

def schedule_checker():
    
    while True:
        scheduler.start()

Thread(target=schedule_checker).start() # Notice that you refer to schedule_checker function which starts the job

myBot.polling() # Also notice that you need to include polling to allow your bot to get commands from you. But it should happen AFTER threading!
