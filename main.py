
import telebot
import schedule
import pymongo
import time
import os
import logging
from apscheduler.schedulers.blocking import BlockingScheduler
from threading import Thread
from telebot import types
from pymongo import MongoClient

message_time = os.environ.get("TIME")
chat_id = os.environ.get("CHAT_ID")

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


myBot = telebot.TeleBot(os.environ.get("TOKEN"))


@myBot.message_handler(commands=['start'])
def startMessage(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    myBot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫", reply_markup=markup)


@myBot.message_handler(commands=['test'])
def testMessage(message):
    client = connectToDB()
    db = client.admin
    myBot.send_message(message.chat.id, db.list_collection_names(include_system_collections=False))

@myBot.message_handler(commands=['createData'])
def createData(message):
    client = connectToDB()
    db = client.admin
    list_of_collections = db.list_collection_names()  # Return a list of collections in 'test_db'
    if "internetData" not in list_of_collections:
        db.create_collection("internetData")
    
    currentCollection = db["internetData"]
    newDocument = {
        "name": "–æ—Å—Ç–∞—Ç–æ–∫",
        "cost": 199
    }
    try:
        currentCollection.insert_one(newDocument)
        myBot.send_message(message.chat.id, '–Ø —Å–æ–∑–¥–∞–ª —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç')
    except OSError as err:
         myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {err=}")


@myBot.message_handler(commands=['removeData'])
def removeData(message):
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    try:
        currentCollection.remove({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
        myBot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ')
    except OSError as err:
        myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö {err=}")


@myBot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–∞')
        markup.add(btn1)
        myBot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–∞':
        getStatMessage(message)

@myBot.message_handler(commands=['getValue'])
def getStatMessage(message):
    currentValue = getData()
    myBot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –Ω–∞ —Å—á–µ—Ç—É {str(currentValue)} —Ä.")


def send_stat():
    currentStat = get_stat()
    message = '–ù–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—á–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è: ' + str(currentStat) + ' —Ä.'
    if float(currentStat) < 100.0:
        message+= '–ü–æ—Ä–∞ –∫–ª–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏!' 
        
    myBot.send_message(chat_id, message)

def connectToDB():
    userName = os.environ.get("MONGO_MONGO_INITDB_ROOT_USERNAME")
    password = os.environ.get("MONGO_MONGO_INITDB_ROOT_PASSWORD")
    client = MongoClient(
    host = 'mongodb://94.26.239.216:22238',
    serverSelectionTimeoutMS = 3000, # 3 second timeout
    username=userName,
    password=password,
    )
    return client

def dataUpdate():
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    try:
        currentCollection.remove({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
        myBot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ')
    except OSError as err:
        myBot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö {err=}")

def getData():
    client = connectToDB()
    db = client.admin
    currentCollection = db["internetData"]
    answer = ""
    currentDoc = currentCollection.find_one({"name": "–æ—Å—Ç–∞—Ç–æ–∫"})
    lastCost = currentDoc["cost"]
    return lastCost

scheduler = BlockingScheduler(timezone="Europe/Moscow") 
scheduler.add_job(send_stat, "cron", hour=9)

def schedule_checker():
    
    while True:
        scheduler.start()

Thread(target=schedule_checker).start() # Notice that you refer to schedule_checker function which starts the job

myBot.polling() # Also notice that you need to include polling to allow your bot to get commands from you. But it should happen AFTER threading!
